require 'strscan'

$regular_opcodes = {} # keys are opcodes
$special_opcodes = {}

def main
  File.open("opcodes.data") do
    |file|
    file.readlines.each do
      |line|
      process_line line.chomp
    end
  end

  output_ocaml_file($stdout)
end

def output_ocaml_file(file)
  file.puts "(* GENERATED by generate_opcodes.rb *)"
  file.puts
  file.puts "let string_of_opcode n f ="
  file.puts "  match n with"
  $regular_opcodes.each do
    |key,opc|
    file.puts "  | #{key} -> \"#{opc[:name]}\""
  end
  $special_opcodes.each do
    |key,opcs|
    file.puts "  | #{key} -> begin"
    file.puts "    match f with"
    opcs.each do
      |opc|
      file.puts "    | #{opc[:field]} -> \"#{opc[:name]}\""
    end
    file.puts "  end"
  end
  file.puts "  | _ -> assert false"
  file.puts

  file.puts "let opcode_of_string s ="
  file.puts "  match (String.uppercase s) with"
  $regular_opcodes.each do
    |key,opc|
    file.puts "  | #{opc[:name]} -> (#{key}, None)"
  end
  $special_opcodes.each do
    |key,opcs|
    opcs.each do
      |opc|
      file.puts "  | #{opc[:name]} -> (#{key}, Some #{opc[:field]})"
    end
  end
  file.puts "  | _ -> assert false"
  file.puts

  file.puts "let dispatch vm ="
  file.puts "  match vm.xC with"
  $regular_opcodes.each do
    |key,opc|
    file.puts "  | #{key} -> op_#{opc[:name]} vm"
  end
  $special_opcodes.each do
    |key,opcs|
    file.puts "  | #{key} -> begin"
    file.puts "    match vm.xF with"
    opcs.each do
      |opc|
      file.puts "    | #{opc[:field]} -> op_#{opc[:name]} vm"
    end
    file.puts "    | _ -> assert false"
    file.puts "  end"
  end
  file.puts "  | _ -> assert false"
  file.puts
end

def process_line(line)
  s = StringScanner.new(line)
  code = s.scan(/[0-9]+/).to_i
  s.skip(/\s+/)
  time = s.scan(/[0-9]+/).to_i
  s.skip(/\s+/)
  rest = s.rest
  rest.gsub!("[*]","JL(4) JE(5) JG(6) JGE(7) JNE(8) JLE(9)")
  rest.gsub!(/([A-Z0-9]+)\[\+\]/,'\1N(0) \1Z(1) \1P(2) \1NN(3) \1NZ(4) \1NP(5)')
  s = StringScanner.new(rest)
  while s.scan(/([A-Z0-9]+)\(([0-9]+)(\:([0-9]+))?\)\s*/)
    name = s[1]
    field_start = s[2].to_i
    if s[4] then # regular opcode
      field_start *= 8
      field_end = s[4].to_i
      $regular_opcodes[code] = {
        :code => code,
        :time => time,
        :name => name,
        :field => field_start + field_end
      }
    else
      $special_opcodes[code] ||= []
      $special_opcodes[code] << {
        :code => code,
        :time => time,
        :name => name,
        :field => field_start
      }
    end
  end
end

main()
